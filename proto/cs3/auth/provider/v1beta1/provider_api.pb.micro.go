// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/auth/provider/v1beta1/provider_api.proto

package providerv1beta1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/refs/cs3-micro/proto/cs3/identity/user/v1beta1"
	_ "github.com/refs/cs3-micro/proto/cs3/rpc/v1beta1"
	_ "github.com/refs/cs3-micro/proto/cs3/types/v1beta1"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProviderAPI service

type ProviderAPIService interface {
	// Authenticate authenticates a client.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error)
}

type providerAPIService struct {
	c    client.Client
	name string
}

func NewProviderAPIService(name string, c client.Client) ProviderAPIService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cs3.auth.provider.v1beta1"
	}
	return &providerAPIService{
		c:    c,
		name: name,
	}
}

func (c *providerAPIService) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.Authenticate", in)
	out := new(AuthenticateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderAPI service

type ProviderAPIHandler interface {
	// Authenticate authenticates a client.
	Authenticate(context.Context, *AuthenticateRequest, *AuthenticateResponse) error
}

func RegisterProviderAPIHandler(s server.Server, hdlr ProviderAPIHandler, opts ...server.HandlerOption) error {
	type providerAPI interface {
		Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error
	}
	type ProviderAPI struct {
		providerAPI
	}
	h := &providerAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&ProviderAPI{h}, opts...))
}

type providerAPIHandler struct {
	ProviderAPIHandler
}

func (h *providerAPIHandler) Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error {
	return h.ProviderAPIHandler.Authenticate(ctx, in, out)
}
